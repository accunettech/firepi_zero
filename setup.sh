#!/usr/bin/env bash
set -euo pipefail

# ============================================
# FirePi setup: OS deps, I2S audio, Python venv, systemd unit
# ============================================

APP_DIR="$(pwd)"
SERVICE_NAME="firepi"
OVERLAY="hifiberry-dac"
CARD_ID=""
PYTHON_BIN="/usr/bin/python3"

print_usage() {
  cat <<EOF
Usage: sudo bash $0 [--app-dir PATH] [--service-name NAME] [--overlay NAME] [--card-id ALSA_ID]

Options:
  --app-dir PATH        Path to your app directory (contains app.py). Default: current directory
  --service-name NAME   Systemd unit name (NAME.service). Default: firepi
  --overlay NAME        I2S overlay to enable. Default: hifiberry-dac
  --card-id ALSA_ID     ALSA card ID for default output (e.g., sndrpihifiberry). Default: auto-detect (fallback -> sndrpihifiberry)
EOF
}

# ---------- arg parsing ----------
while [[ $# -gt 0 ]]; do
  case "$1" in
    --app-dir)       APP_DIR="$2"; shift 2 ;;
    --service-name)  SERVICE_NAME="$2"; shift 2 ;;
    --overlay)       OVERLAY="$2"; shift 2 ;;
    --card-id)       CARD_ID="$2"; shift 2 ;;
    -h|--help)       print_usage; exit 0 ;;
    *) echo "Unknown arg: $1"; print_usage; exit 1 ;;
  esac
done

# ---------- root check ----------
if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then
  echo "Please run as root (use sudo)." >&2
  exit 1
fi

# ---------- sanity checks ----------
if [[ ! -d "$APP_DIR" ]]; then
  echo "App directory not found: $APP_DIR" >&2
  exit 1
fi
if [[ ! -f "$APP_DIR/app.py" ]]; then
  echo "app.py not found in $APP_DIR" >&2
  exit 1
fi

RUN_USER="${SUDO_USER:-$USER}"
RUN_GROUP="$(id -gn "$RUN_USER")"

run_as_user() {
  # Run a command as the non-root runtime user with login shell
  sudo -u "$RUN_USER" -H bash -lc "$*"
}

echo "==> Using:"
echo "    APP_DIR        = $APP_DIR"
echo "    SERVICE_NAME   = $SERVICE_NAME"
echo "    OVERLAY        = $OVERLAY"
echo "    CARD_ID (in)   = ${CARD_ID:-<auto>}"
echo "    RUN_USER/GROUP = $RUN_USER:$RUN_GROUP"
echo

# ---------- install OS deps ----------
echo "==> Installing OS packages..."
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get install -y \
  python3 python3-venv python3-pip git \
  alsa-utils mpg123 sox libsox-fmt-mp3 \
  python3-numpy python3-opencv \
  python3-gpiozero python3-paho-mqtt \
  python3-picamera2 libcamera-apps || true

# ---------- disable pigpiod (avoids I2S conflicts) ----------
echo "==> Disabling pigpiod (if present)..."
if systemctl list-unit-files | grep -q '^pigpiod\.service'; then
  systemctl disable --now pigpiod.service || true
fi

# ---------- ensure user in audio group ----------
if ! id -nG "$RUN_USER" | tr ' ' '\n' | grep -qx audio; then
  echo "==> Adding $RUN_USER to 'audio' group..."
  usermod -aG audio "$RUN_USER"
fi

# ---------- /boot/*/config.txt ----------
CONFIG_TXT=""
for f in /boot/firmware/config.txt /boot/config.txt; do
  if [[ -f "$f" ]]; then CONFIG_TXT="$f"; break; fi
done
if [[ -z "$CONFIG_TXT" ]]; then
  CONFIG_TXT="/boot/firmware/config.txt"
  touch "$CONFIG_TXT"
fi

echo "==> Updating $CONFIG_TXT (disable onboard audio, add overlay)..."
cp -a "$CONFIG_TXT" "$CONFIG_TXT.bak.$(date +%Y%m%d-%H%M%S)"

# dtparam=audio=off
if grep -Eq '^\s*dtparam=audio=' "$CONFIG_TXT"; then
  sed -i 's/^\s*dtparam=audio=.*/dtparam=audio=off/g' "$CONFIG_TXT"
else
  echo "dtparam=audio=off" >> "$CONFIG_TXT"
fi

# remove duplicates then add desired overlay
sed -i "/^dtoverlay=${OVERLAY//\//\\/}/d" "$CONFIG_TXT"
echo "dtoverlay=${OVERLAY}" >> "$CONFIG_TXT"

# ---------- detect ALSA card id (if not provided) ----------
detect_card_id() {
  local id=""
  if aplay -l >/tmp/aplay_list 2>/dev/null; then
    # Example: "card 0: sndrpihifiberry [snd_rpi_hifiberry_dac], device 0: ..."
    id="$(awk -F'[:, ]+' '/^card [0-9]+:/ {print $3; exit}' /tmp/aplay_list)"
  fi
  echo "$id"
}

if [[ -z "$CARD_ID" ]]; then
  CARD_ID="$(detect_card_id || true)"
fi
if [[ -z "$CARD_ID" ]]; then
  CARD_ID="sndrpihifiberry"
fi
echo "==> ALSA CARD_ID (out) = $CARD_ID"

# ---------- write /etc/asound.conf ----------
ASOUND="/etc/asound.conf"
echo "==> Writing $ASOUND ..."
cp -a "$ASOUND" "$ASOUND.bak.$(date +%Y%m%d-%H%M%S)" 2>/dev/null || true

cat >"$ASOUND" <<'EOF'
# Auto-generated by FirePi setup

# Hardware: HiFiBerry DAC (card 0, device 0)
pcm.i2s_hw {
  type hw
  card 0
  device 0
}

# Mono -> both channels (duplicate L to L/R)
pcm.route_out {
  type route
  slave.pcm "i2s_hw"
  slave.channels 2
  ttable.0.0 1   # L -> L
  ttable.0.1 1   # L -> R
}

# Software volume control "PCM" in default path
pcm.!default {
  type softvol
  slave.pcm "route_out"
  control { name "PCM"; card 0 }
  min_dB -51.0
  max_dB 0.0
}

ctl.!default {
  type hw
  card 0
}
EOF

# ---------- Python venv (+ system site packages) ----------
echo "==> Creating/refreshing Python venv with system site packages in ${APP_DIR}/.venv ..."
chown -R "$RUN_USER:$RUN_GROUP" "$APP_DIR"

LOG_DIR="/var/log/firepi"
mkdir -p "$LOG_DIR"
chown -R "$RUN_USER:$RUN_GROUP" "$LOG_DIR"

VENV_DIR="${APP_DIR}/.venv"
VENV_PY="${VENV_DIR}/bin/python"
VENV_PIP="${VENV_DIR}/bin/pip"

# (Re)create venv with --system-site-packages so apt-installed numpy/opencv are visible
if [[ -d "$VENV_DIR" ]]; then
  rm -rf "$VENV_DIR"
fi
run_as_user "$PYTHON_BIN -m venv --system-site-packages '$VENV_DIR'"

# Upgrade pip tooling
run_as_user "'$VENV_PY' -m pip install --upgrade pip setuptools wheel"

# Install requirements
if [[ -f "$APP_DIR/requirements.txt" ]]; then
  echo "==> Installing requirements from requirements.txt ..."
  # Tip: the venv can see apt OpenCV/NumPy; avoid pip wheels for those if present
  run_as_user "'$VENV_PIP' install -r '$APP_DIR/requirements.txt'"
else
  echo "==> requirements.txt not found; installing minimal runtime set ..."
  run_as_user "'$VENV_PIP' install 'Flask>=3,<4' 'Flask-SQLAlchemy>=3.1,<4' 'SQLAlchemy>=2,<3' 'PyYAML>=6,<7' 'paho-mqtt==1.6.1' 'twilio>=8,<9' 'clicksend-client==5.0.78' 'gpiozero>=1.6,<2'"
fi

# Quick import check for cv2 via venv (should resolve to system package)
echo "==> Sanity check: importing cv2 via venv ..."
if ! run_as_user "'$VENV_PY' - <<'PY'
import cv2, numpy
print('cv2:', cv2.__version__)
print('numpy:', numpy.__version__)
PY
"; then
  echo "WARNING: Could not import cv2/numpy inside the venv. Ensure python3-opencv and python3-numpy are installed." >&2
fi

# ---------- systemd unit ----------
UNIT_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
echo "==> Writing ${UNIT_FILE} ..."
cat >"$UNIT_FILE" <<EOF
[Unit]
Description=FirePi Monitor
After=network-online.target sound.target
Wants=network-online.target

[Service]
Type=simple
User=${RUN_USER}
Group=${RUN_GROUP}
WorkingDirectory=${APP_DIR}
Environment=PYTHONUNBUFFERED=1
Environment=FIREPI_LOG_DIR=/var/log/firepi
Environment=FIREPI_LOG_LEVEL=INFO
ExecStart=${VENV_PY} -u app.py
Restart=always
RestartSec=2
# Give ALSA init a moment after boot
ExecStartPre=/bin/sleep 2
KillMode=process
TimeoutStopSec=10s

[Install]
WantedBy=multi-user.target
EOF

echo "==> Enabling service (will start after reboot)..."
systemctl daemon-reload
systemctl enable "${SERVICE_NAME}.service"

HOST_NAME="$(hostname -f 2>/dev/null || hostname)"
if [[ "$HOST_NAME" != *.* ]]; then
  HOST_NAME="${HOST_NAME}.local"
fi
HOST_IP="$(hostname -I 2>/dev/null | awk '{print $1}')"
SELF_URL_HOST="http://${HOST_NAME}:5000/"
SELF_URL_IP="http://${HOST_IP}:5000/"

# ---------- final notes ----------
echo
echo "=============================================================="
echo "SETUP COMPLETE. A reboot is recommended for IÂ²S overlay to apply."
echo "=============================================================="
echo
echo "Next steps:"
echo "  1) Reboot now:"
echo "       sudo reboot"
echo
echo "  2) After reboot, verify audio device and service:"
echo "       aplay -l"
echo "       cat /etc/asound.conf"
echo "       systemctl status ${SERVICE_NAME}.service"
echo "       journalctl -u ${SERVICE_NAME}.service -b --no-pager"
echo
echo "  3) Audio test (use a wav):"
echo "       aplay /path/to/sound.wav"
echo
echo "  4) Open the app:"
echo "       ${SELF_URL_HOST}"
echo "       ${SELF_URL_IP}"
echo
echo "Changes made:"
echo "  - Installed: python3-venv, python3-pip, alsa-utils, mpg123, sox, libsox-fmt-mp3,"
echo "               python3-numpy, python3-opencv, python3-gpiozero, python3-paho-mqtt,"
echo "               (python3-picamera2 + libcamera-apps if available)"
echo "  - Disabled: pigpiod.service"
echo "  - Updated:  ${CONFIG_TXT} (dtparam=audio=off, dtoverlay=${OVERLAY})"
echo "  - Wrote:    /etc/asound.conf (card 0 with softvol 'PCM')"
echo "  - Created:  ${UNIT_FILE} (service uses venv with system site packages)"
echo "  - Enabled:  ${SERVICE_NAME}.service (starts on next boot)"
echo
echo "If ALSA card index differs after reboot, adjust /etc/asound.conf (card 0 -> your card index)"
echo "or re-run:"
echo "  sudo bash $0 --app-dir '${APP_DIR}' --service-name '${SERVICE_NAME}' --overlay '${OVERLAY}' --card-id <your_card_id>"
echo